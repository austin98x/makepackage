#!/bin/bash
#make deb, rpm, pkg, xz package on Linux platform 

set -e

# Load package settings
source config

#ELF define see /usr/include/elf.h
# elf-bit
ELFCLASS32=1               #32-bit objects 
ELFCLASS64=2               #64-bit objects 

# elf-architecture
EM_386=3                   #Intel 80386
EM_X86_64=62               #AMD x86-64 architecture
EM_MIPS=8                  #MIPS R3000
EM_AARCH64=183             #ARM AARCH64
EM_SW64=39174              #SW64

#-------------------------------------------------------------------------------
# public functions

die()
{
	echo "$@"
	exit 1
}

check()
{
	if which "$1" > /dev/null; then
		echo "Check $1 ... [OK]"
	else
		die "Can not found $1!"
	fi
}

indent()
{
	while read line; do 
		echo "    $line"
	done
}

install_files()
{
	# optimized version, combine same dest files, and using one cp command.
	while [ "$#" != "0" ]; do
		if [[ $1 =~ \*$ ]]; then
			files=( $1 )
		else
			files=( "$1" )
		fi
		dest="$2"
		while [ "$dest" == "$4" ]; do
			shift 2
			if [[ $1 =~ \*$ ]]; then
				files+=( $1 )
			else
				files+=( "$1" )
			fi
		done
		cp -vaf "${files[@]}" "$gTmpGenPackagePath$dest"
		shift 2
	done
}

instantiate()
{
	echo "instantiate $1 -> $2"
	x="cat <<EOF
$(<$1)
EOF"
	eval "$x" > $2
}

get_architecture()
{
	libTest=${PWD}/Release/app/bin/libQtCore.so
	if [ ! -f  "$libTest" ]; then
		die "$libTest is not exsits"
	fi

	arch=`hexdump $libTest -n 2 -s 18 -e '1/2 "%u" '`
	bit=`hexdump  $libTest -n 1 -s 4 -e '1/1 "%u"'`

	case "$arch:$bit" in 
		"$EM_386:$ELFCLASS32")
			echo "i386";;
		"$EM_X86_64:$ELFCLASS64")
			echo "amd64";;
		"$EM_MIPS:$ELFCLASS32")
			echo "mips";;
		"$EM_MIPS:$ELFCLASS64")
			echo "mips64";;
		"$EM_AARCH64:$ELFCLASS64")
			echo "aarch64";;
		"$EM_SW64:$ELFCLASS64")
			echo "sw64";;
		*)
			die "Unknown architecture: $arch:$bit"
	esac
}

get_arch_for_package()
{
	[ ! -z "$1" ] || die "You must specify package type"
	pkg_deb=( i386 amd64 mipsel mips64el arm64 sw_64)
	pkg_rpm=( i686 x86_64 mipsel mips64el aarch64 sw_64)
	pkg_pkg=( i686 x86_64 mipsel mips64el arm64 sw_64)
	pkg_xz=( x86 x86_64 mipsel mips64el arm64 sw_64)
	arch=`get_architecture`
	case "$arch" in
		"i386")
			eval "echo \${pkg_$1[0]}";;
		"amd64")
			eval "echo \${pkg_$1[1]}";;
		"mips")
			eval "echo \${pkg_$1[2]}";;
		"mips64")
			eval "echo \${pkg_$1[3]}";;
		"aarch64")
			eval "echo \${pkg_$1[4]}";;
		"sw64")
			eval "echo \${pkg_$1[5]}";;
		*)
			die "Die one more time~~"
	esac
}
	
begin_parallel()
{
	export PARALLEL_DIR=/tmp/bash-parallel-$BASHPID
	rm -rf $PARALLEL_DIR
	mkdir -p $PARALLEL_DIR
}

end_parallel()
{
	wait
	for pid in $(ls $PARALLEL_DIR)
	{
		ec=`cat $PARALLEL_DIR/$pid/exit_code`
		if [ "$ec" != "0" ]; then
			cmd=(`cat $PARALLEL_DIR/$pid/cmd`)
			echo "Task \"${cmd[0]} [${pid}]\" run failed with exit code: $ec" > /dev/stderr
			echo "    Error outputs: " > /dev/stderr
			cat "$PARALLEL_DIR/$pid/err" | indent > /dev/stderr
			rm -rf $PARALLEL_DIR
			exit $ec
		fi
	}
	rm -rf $PARALLEL_DIR
}

on_parallel_exit()
{
	echo $? > $PARALLEL_DIR/$PID/exit_code
}

run_parallel_internal()
{
	PID=$BASHPID
	CMD=$1
	shift

	mkdir -p $PARALLEL_DIR/$PID
	echo "$CMD $@" > $PARALLEL_DIR/$PID/cmd
	trap on_parallel_exit EXIT

	${CMD} "$@" 2> $PARALLEL_DIR/$PID/err
	
	echo $? > $PARALLEL_DIR/$PID/exit_code
}

run_parallel()
{
	run_parallel_internal "$@" &
}



#-------------------------------------------------------------------------------
# stages

stage_precheck()
{
	[ -f package_file_list ] || die "get package_file_list first!"
	check dpkg-deb
	check rpmbuild
	check fakeroot

	echo "Arch: `get_architecture`"
}

stage_prepare()
{
	if [ -d "$gTmpGenPackagePath" ]; then
		echo "Cleaning $gTmpGenPackagePath ..."
		rm -rf "$gTmpGenPackagePath"
	fi

	echo "Generating $gTmpGenPackagePath ..."
	mkdir "$gTmpGenPackagePath"

	export gDesArch=`get_architecture`

	source filelist
	
	# make all directories...
	for i in "${_packagerFolders[@]}"
	{
		mkdir -p "$gTmpGenPackagePath$i"
	}

	# install all files
	begin_parallel

		run_parallel install_files "${_package_files[@]}"

	end_parallel
}

stage_build_deb()
{
	PKG_ARCH=`get_arch_for_package deb`
	PKG_VERSION="${gMajorVer}.${gFirstVer}.${gSecondVer}.${gCurVer}"
	PKG_NAME=${gProjectName}_${PKG_VERSION}_${PKG_ARCH}_deb
	PKG_TMP_PATH=${gTmpGenPackagePath}/${PKG_NAME}

	mkdir -p "$PKG_TMP_PATH"

	cp -fr $gTmpGenPackagePath/opt $PKG_TMP_PATH
	cp -rv DEBIAN "$PKG_TMP_PATH"

	chmod 755 DEBIAN/{postinst,postrm,prerm}

	gShellPath="$PKG_TMP_PATH/DEBIAN"

	PKG_SIZE=`du -ks --exclude=DEBIAN "$PKG_TMP_PATH" | awk '{print $1}'`

	instantiate "$PKG_TMP_PATH/DEBIAN/control.in" "$PKG_TMP_PATH/DEBIAN/control"
	rm -fv "$PKG_TMP_PATH/DEBIAN/control.in"

	fakeroot dpkg-deb -Z xz -z 9 --build "${PKG_TMP_PATH}" "${gPackagePath}"
}

stage_build_rpm()
{
	PKG_ARCH=`get_arch_for_package rpm`
	PKG_VERSION="${gMajorVer}.${gFirstVer}.${gSecondVer}.${gCurVer}"
	PKG_RELEASE=0
	PKG_NAME=${gProjectName}-${PKG_VERSION}-1.${PKG_RELEASE}.${PKG_ARCH}
	PKG_TMP_PATH=${gTmpGenPackagePath}/${PKG_NAME}

	mkdir -p $PKG_TMP_PATH/{SOURCES,SPECS}

	cp -fr $gTmpGenPackagePath/opt $PKG_TMP_PATH/SOURCES

	instantiate rpm/app.spec.in "$PKG_TMP_PATH/SPECS/app.spec"

	gDesArch=`get_architecture`
	cd $PKG_TMP_PATH

	rpmbuild --define "_topdir `pwd`" --define "_binary_payload w9.lzdio" -bb --target $PKG_ARCH SPECS/app.spec
	mv RPMS/$PKG_ARCH/$PKG_NAME.rpm "${gPackagePath}"

	cd -
}

#On ubuntu platform not support this, this is for Arch.
stage_build_pkg()
{
	if ! which makepkg > /dev/null ; then
		echo "Ignored build Arch package"
		return
	fi

	# Arch not support arch platform, and not support multiarch 
	PKG_ARCH=`get_arch_for_package pkg`
	PKG_VERSION="$gMajorVer.$gFirstVer.$gSecondVer.$gCurVer"
	PKG_NAME=$gProjectName-$PKG_VERSION-$PKG_ARCH
	PKG_TMP_PATH=$gTmpGenPackagePath/$PKG_NAME

	mkdir -p "$PKG_TMP_PATH/src"
	cp -vf pkg/{pkg.install,PKGBUILD} "$PKG_TMP_PATH"
	sed -i "s/arch=('i686' 'x86_64')/arch=('$PKG_ARCH')/" ./$PKG_TMP_PATH/PKGBUILD

	cp -fr $gTmpGenPackagePath/opt $PKG_TMP_PATH/src

	cd $PKG_TMP_PATH

	sed -i -e "s/PKG_VER/$PKG_VERSION/g" PKGBUILD

	# cross package should add --ignorearch
	makepkg --skipinteg --nodeps --repackage --ignorearch --force
	mv $PKG_NAME.pkg.tar.xz $gPackagePath
	cd -
}

stage_build_xz()
{
	PKG_ARCH=`get_arch_for_package xz`
	PKG_VERSION="$gMajorVer.$gFirstVer.$gSecondVer.$gCurVer"
	PKG_NAME=$gProjectName_$PKG_VERSION_$PKG_ARCH
	PKG_FILE=$gPackagePath/$PKG_NAME.tar.xz
	PKG_TMP_PATH=$gTmpGenPackagePath/$PKG_NAME

	rm -fr "$PKG_FILE"

	mkdir -p "$PKG_TMP_PATH"

	cp -rfv $gTmpGenPackagePath/${gInstallPath} $PKG_TMP_PATH
	cp -fv tar/* $PKG_TMP_PATH

	cd $gTmpGenPackagePath
	XZ_OPT="-T 0" tar Jcvf $PKG_FILE $PKG_NAME
	cd -
}

stage_build()
{
	mkdir -pv "${gPackagePath}"

	begin_parallel

		run_parallel stage_build_deb
		run_parallel stage_build_rpm
		run_parallel stage_build_pkg
		run_parallel stage_build_xz

	end_parallel
}

stage_clean()
{
	echo "rm: ${gTmpGenPackagePath}"
	rm -rf "${gTmpGenPackagePath}"
}

#-------------------------------------------------------------------------------
# main

if [ "$#" != 0 ]; then
	stages=( "$@" )
else
	stages=( precheck prepare build clean )
fi

msg_precheck="System check..."
msg_prepare="Prepare files..."
msg_build="Building package..."
msg_clean="Cleaning temporary files..."

for x in "${stages[@]}"
{
	eval "echo \${msg_${x}}"
	stage_${x} | indent
	[ ${PIPESTATUS[0]} = 0 ] || exit ${PIPESTATUS[0]}
}

